#Make sure you understand all the imports below
#they may help you save time
from numpy import array
from numpy.random import rand
from pandas import DataFrame


def simulate_grades(class_size, max_scores=[100,100,100]):
    """
    Simulate student grades
    Rows correspond to students (the number of students is class_size)
    Columns correspond to grade item (such final, midterm, or homework)
        note: there should be a column that corresponds to each element
        of max_scores, which gives the maximum number that may appear
        in that column

    Parameters
    ----------
    class_size : int
        Number of student grade reccords to simulate

    max_scores: list
        list of the maximal possible scores

    Returns
    -------
    out : numpy array
        Array with class_size rows and len(graded_item) columns and
        column i values randomly generated numbers
        between 0 and max_scores[i]

    Hint
    ----
    Note that rand is imported from numpy.random at the top
    of the file.  Here's the top of it's docstring:

      Create an array of the given shape and propagate it with
      random samples from a uniform distribution
      over ``[0, 1)``.

    Examples
    --------
    >>> simulate_grades(4,[5,5,5]).shape == (4,3)
    True
    >>> simulate_grades(250, [100, 100, 100]).max() < 100
    True
    >>> simulate_grades(250, [100, 100, 100]).min() > 0
    True
    >>> g = simulate_grades(10, [5, 20, 40])
    >>> g[:,0].max() < 5
    True
    >>> g[:,1].max() < 20
    True
    >>> g[:,2].max() < 40
    True
    """
    item_num = len(max_scores)
    grades = rand(class_size, item_num)
    grades[grades < 0] = 0

    for i in range(0,item_num):
        col = grades[:,i]*max_scores[i]
        col[col > max_scores[i]] = max_scores[i]
        grades[:,i] = col

    return grades

#############################################################################
####  Note:
####    The following works as well.  This solution uses numpy broadcasting:
####      http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html
##    grades = rand(class_size, len(max_scores))
##    return grades * array(max_scores)
#############################################################################


def simulate_grade_df(class_size, grade_items={'F':100,'M':100,'HW':10}):
    """
    Simulate a Pandas DataFrame of grades

    Parameters
    ----------
    class_size : int
        Number of student grade reccords to simulates

    graded_items: dict
        Dictionary keys are the graded item names
        Dictionary values are the maximal possible scores

    Returns
    -------
    out : Pandas DataFrame
        DataFrame with class_size rows and len(graded_item) columns
        The rows correspond to students
        The columns must be labelled with the keys of grade_items
        The values are the same as generated by the previous function

    Hint
    ----
        Reuse the function simulate_grades in this function body

    Examples
    --------
    >>> simulate_grade_df(4,{'M':5,'F':5,'HW':5}).shape == (4,3)
    True
    """
    item_names   = grade_items.keys()
    max_scores   = grade_items.values()
    grade_values = simulate_grades(class_size, max_scores)
    grades       = DataFrame(grade_values, columns=item_names)
    return grades



class GradeBook(object):
    """A class encapsulating a pandas DataFrame and meant to store
    the grades for a whole class. It provides the method compute_total_grades
    that compute the totla grade for each student according to a weights provided
    by the caller.
    """

    def __init__(self, grade_arr, student_ids, item_list, max_scores):
        """
        Constructor of the class grade frame:
        It should set the following attributes:

        (1) self.raw_grades, which is a DataFrame with
        - row labels given by student_ids
        - column labels given by item_list
        - values given by grade_arr

        (2) self.total_grades, set to None

        (3) self.letter_grades, set to None

        (4) self.max_scores, set to max_scores

        Parameters
        ----------
        grade_arr : numpy array of grades as returned by simulate_grades

        student_ids: a list of student ids

        item_list: a list of grade items (e.g. ['HW', 'M', 'F'])

        max_scores: a list of the maximum possible score for each grade item

        Returns
        -------
        nothing

        Examples
        --------
        >>> a = GradeBook(array([[1,2],[3,4]]),['22','34'],['F','M'],[30, 50])
        >>> type(a.raw_grades) == DataFrame
        True
        >>> a.total_grades == None
        True
        >>> a.raw_grades.shape == (2,2)
        True
        >>> a.raw_grades.ix[0,0] == 1
        True
        >>> a.max_scores[0] == 30
        True
        """
        self.max_scores = max_scores
        self.total_grades = None
        self.raw_grades = DataFrame(grade_arr, index=student_ids, columns=item_list)

    def compute_total_grades(self, item_weights=None, max_score=100):
        """
        Compute student total class grades as a weighted average of the column in self.raw_grades
        according to the weights passed to item_weight for each of the columns.
        The student total class grades are then stored in the Series attribute self.total_grades
        The return value should be a Series containing a numerical summary
        (as returned by the Series method describe) of the total class grade distribution.

        Parameters
        ----------
        item_weights: list of floats summing up to one
            List of weights to be applied to each grade item (e.g. [0.3, 0.4, 0.3])

        max_score: float
            Maximal possible score for the total class grade

        Returns
        -------
        out : Series
            A Series containing a numerical summary of the total
            grade distribution previously stored by the function
            in the attribute self.total_grades; this Series is the
            output of the Series method describe.
        ----

        Examples
        --------
        >>> a = GradeBook(array([[5,5],[1,1]]),['22','34'],['F','M'],[10, 10])
        >>> b = a.compute_total_grades([0.5, 0.5], 100)
        >>> len(b) == 5
        False
        >>> a.total_grades['22'] == 50
        True
        >>> a.total_grades['34'] == 10
        True
        """
        normalized_grades = self.raw_grades/array(self.max_scores, dtype=float)
        weigthed_grades   = normalized_grades * array(item_weights)
        self.total_grades = max_score * weigthed_grades.sum(1)
        return self.total_grades.describe()



if __name__ == "__main__":
    import doctest
    doctest.testmod()
